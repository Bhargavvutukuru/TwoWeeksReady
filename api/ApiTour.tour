{
  "title": "ApiTour",
  "steps": [
    {
      "file": "TwoWeeksReady/EmergencyKits/EmergencyKitsApi.cs",
      "line": 20,
      "description": "# Emergency Kit Service Implementation\r\n\r\nFind the implementation of UI API (2wr-app/src/api/module-name) in folders that reflect the module in the UI.",
      "contents": "using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Http;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.Azure.Documents;\r\nusing Microsoft.Azure.Documents.Client;\r\nusing Microsoft.Azure.Documents.Linq;\r\nusing Microsoft.Azure.WebJobs;\r\nusing Microsoft.Azure.WebJobs.Extensions.Http;\r\nusing Microsoft.Azure.WebJobs.Host;\r\nusing Microsoft.Extensions.Logging;\r\nusing Newtonsoft.Json;\r\nusing AzureFunctions.OidcAuthentication;\r\n\r\nnamespace TwoWeeksReady.EmergencyKits\r\n{\r\n    public class EmergencyKitsApi\r\n    {\r\n        private readonly IApiAuthentication _apiAuthentication;\r\n\r\n        public EmergencyKitsApi(IApiAuthentication apiAuthentication)\r\n        {\r\n            _apiAuthentication = apiAuthentication;\r\n        }\r\n\r\n        [FunctionName(\"emergencykits\")]\r\n        public async Task<IActionResult> GetList(\r\n            [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", Route = null)]\r\n            HttpRequest req,\r\n            [CosmosDB( databaseName: \"2wr\", collectionName: \"emergencykits\", ConnectionStringSetting = \"CosmosDBConnection\")]\r\n            DocumentClient client,\r\n            ILogger log)\r\n        {\r\n          \r\n            log.LogInformation($\"Getting list of emergency kits\");      \r\n            var authorizationResult = await _apiAuthentication.AuthenticateAsync(req.Headers);\r\n            if (authorizationResult.Failed)\r\n            {\r\n                log.LogWarning(authorizationResult.FailureReason);\r\n                return new UnauthorizedResult();\r\n            }      \r\n            Uri collectionUri = UriFactory.CreateDocumentCollectionUri(\"2wr\", \"emergencykits\");\r\n            var query = client.CreateDocumentQuery<EmergencyKit>(collectionUri, new FeedOptions{EnableCrossPartitionQuery = true}) // REVIEW: Why is this required when my where clause includes the partition id?\r\n                                .Where(e => e.UserId == authorizationResult.User.Identity.Name)\r\n                                .AsDocumentQuery();\r\n\r\n            var emergencyKits = new List<EmergencyKit>();\r\n            while (query.HasMoreResults)\r\n            {\r\n                var result = await query.ExecuteNextAsync<EmergencyKit>();\r\n                emergencyKits.AddRange(result);                \r\n            }\r\n\r\n            return new OkObjectResult(emergencyKits);\r\n        }\r\n\r\n        [FunctionName(\"emergencykits-add\")]\r\n        public async Task<IActionResult> Add(\r\n            [HttpTrigger(AuthorizationLevel.Anonymous, \"post\", Route = null)]\r\n            HttpRequest req,\r\n            [CosmosDB( databaseName: \"2wr\", collectionName: \"emergencykits\", ConnectionStringSetting = \"CosmosDBConnection\")]\r\n            DocumentClient client,\r\n            ILogger log)\r\n        {\r\n          \r\n            log.LogInformation($\"Getting list of emergency kits\");      \r\n            var authorizationResult = await _apiAuthentication.AuthenticateAsync(req.Headers);\r\n            if (authorizationResult.Failed)\r\n            {\r\n                log.LogWarning(authorizationResult.FailureReason);\r\n                return new UnauthorizedResult();\r\n            }\r\n\r\n            var content = await new StreamReader(req.Body).ReadToEndAsync();\r\n            var newEmergencyKit = JsonConvert.DeserializeObject<EmergencyKit>(content);\r\n            newEmergencyKit.Id = Guid.NewGuid().ToString();\r\n            newEmergencyKit.UserId = authorizationResult.User.Identity.Name;\r\n\r\n            Uri collectionUri = UriFactory.CreateDocumentCollectionUri(\"2wr\", \"emergencykits\");\r\n            Document document = await client.CreateDocumentAsync(collectionUri, newEmergencyKit);\r\n      \r\n           \r\n            return new OkObjectResult(newEmergencyKit);\r\n        }\r\n    }\r\n}\r\n"
    },
    {
      "file": "TwoWeeksReady/EmergencyKits/EmergencyKitsApi.cs",
      "line": 26,
      "description": "# Authentication\r\n\r\nFor every feature that requires authentication, use dependency injection of an IApiAuthentication instance.",
      "contents": "using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Http;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.Azure.Documents;\r\nusing Microsoft.Azure.Documents.Client;\r\nusing Microsoft.Azure.Documents.Linq;\r\nusing Microsoft.Azure.WebJobs;\r\nusing Microsoft.Azure.WebJobs.Extensions.Http;\r\nusing Microsoft.Azure.WebJobs.Host;\r\nusing Microsoft.Extensions.Logging;\r\nusing Newtonsoft.Json;\r\nusing AzureFunctions.OidcAuthentication;\r\n\r\nnamespace TwoWeeksReady.EmergencyKits\r\n{\r\n    public class EmergencyKitsApi\r\n    {\r\n        private readonly IApiAuthentication _apiAuthentication;\r\n\r\n        public EmergencyKitsApi(IApiAuthentication apiAuthentication)\r\n        {\r\n            _apiAuthentication = apiAuthentication;\r\n        }\r\n\r\n        [FunctionName(\"emergencykits\")]\r\n        public async Task<IActionResult> GetList(\r\n            [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", Route = null)]\r\n            HttpRequest req,\r\n            [CosmosDB( databaseName: \"2wr\", collectionName: \"emergencykits\", ConnectionStringSetting = \"CosmosDBConnection\")]\r\n            DocumentClient client,\r\n            ILogger log)\r\n        {\r\n          \r\n            log.LogInformation($\"Getting list of emergency kits\");      \r\n            var authorizationResult = await _apiAuthentication.AuthenticateAsync(req.Headers);\r\n            if (authorizationResult.Failed)\r\n            {\r\n                log.LogWarning(authorizationResult.FailureReason);\r\n                return new UnauthorizedResult();\r\n            }      \r\n            Uri collectionUri = UriFactory.CreateDocumentCollectionUri(\"2wr\", \"emergencykits\");\r\n            var query = client.CreateDocumentQuery<EmergencyKit>(collectionUri, new FeedOptions{EnableCrossPartitionQuery = true}) // REVIEW: Why is this required when my where clause includes the partition id?\r\n                                .Where(e => e.UserId == authorizationResult.User.Identity.Name)\r\n                                .AsDocumentQuery();\r\n\r\n            var emergencyKits = new List<EmergencyKit>();\r\n            while (query.HasMoreResults)\r\n            {\r\n                var result = await query.ExecuteNextAsync<EmergencyKit>();\r\n                emergencyKits.AddRange(result);                \r\n            }\r\n\r\n            return new OkObjectResult(emergencyKits);\r\n        }\r\n\r\n        [FunctionName(\"emergencykits-add\")]\r\n        public async Task<IActionResult> Add(\r\n            [HttpTrigger(AuthorizationLevel.Anonymous, \"post\", Route = null)]\r\n            HttpRequest req,\r\n            [CosmosDB( databaseName: \"2wr\", collectionName: \"emergencykits\", ConnectionStringSetting = \"CosmosDBConnection\")]\r\n            DocumentClient client,\r\n            ILogger log)\r\n        {\r\n          \r\n            log.LogInformation($\"Getting list of emergency kits\");      \r\n            var authorizationResult = await _apiAuthentication.AuthenticateAsync(req.Headers);\r\n            if (authorizationResult.Failed)\r\n            {\r\n                log.LogWarning(authorizationResult.FailureReason);\r\n                return new UnauthorizedResult();\r\n            }\r\n\r\n            var content = await new StreamReader(req.Body).ReadToEndAsync();\r\n            var newEmergencyKit = JsonConvert.DeserializeObject<EmergencyKit>(content);\r\n            newEmergencyKit.Id = Guid.NewGuid().ToString();\r\n            newEmergencyKit.UserId = authorizationResult.User.Identity.Name;\r\n\r\n            Uri collectionUri = UriFactory.CreateDocumentCollectionUri(\"2wr\", \"emergencykits\");\r\n            Document document = await client.CreateDocumentAsync(collectionUri, newEmergencyKit);\r\n      \r\n           \r\n            return new OkObjectResult(newEmergencyKit);\r\n        }\r\n    }\r\n}\r\n"
    },
    {
      "file": "TwoWeeksReady/EmergencyKits/EmergencyKitsApi.cs",
      "line": 30,
      "description": "## Retrieve a list of emergency kits\r\n\r\nRetrieves a list of emergency kits based on the authenticated user (obtained from the bearer token passed in by the UI calls).",
      "contents": "using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Http;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.Azure.Documents;\r\nusing Microsoft.Azure.Documents.Client;\r\nusing Microsoft.Azure.Documents.Linq;\r\nusing Microsoft.Azure.WebJobs;\r\nusing Microsoft.Azure.WebJobs.Extensions.Http;\r\nusing Microsoft.Azure.WebJobs.Host;\r\nusing Microsoft.Extensions.Logging;\r\nusing Newtonsoft.Json;\r\nusing AzureFunctions.OidcAuthentication;\r\n\r\nnamespace TwoWeeksReady.EmergencyKits\r\n{\r\n    public class EmergencyKitsApi\r\n    {\r\n        private readonly IApiAuthentication _apiAuthentication;\r\n\r\n        public EmergencyKitsApi(IApiAuthentication apiAuthentication)\r\n        {\r\n            _apiAuthentication = apiAuthentication;\r\n        }\r\n\r\n        [FunctionName(\"emergencykits\")]\r\n        public async Task<IActionResult> GetList(\r\n            [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", Route = null)]\r\n            HttpRequest req,\r\n            [CosmosDB( databaseName: \"2wr\", collectionName: \"emergencykits\", ConnectionStringSetting = \"CosmosDBConnection\")]\r\n            DocumentClient client,\r\n            ILogger log)\r\n        {\r\n          \r\n            log.LogInformation($\"Getting list of emergency kits\");      \r\n            var authorizationResult = await _apiAuthentication.AuthenticateAsync(req.Headers);\r\n            if (authorizationResult.Failed)\r\n            {\r\n                log.LogWarning(authorizationResult.FailureReason);\r\n                return new UnauthorizedResult();\r\n            }      \r\n            Uri collectionUri = UriFactory.CreateDocumentCollectionUri(\"2wr\", \"emergencykits\");\r\n            var query = client.CreateDocumentQuery<EmergencyKit>(collectionUri, new FeedOptions{EnableCrossPartitionQuery = true}) // REVIEW: Why is this required when my where clause includes the partition id?\r\n                                .Where(e => e.UserId == authorizationResult.User.Identity.Name)\r\n                                .AsDocumentQuery();\r\n\r\n            var emergencyKits = new List<EmergencyKit>();\r\n            while (query.HasMoreResults)\r\n            {\r\n                var result = await query.ExecuteNextAsync<EmergencyKit>();\r\n                emergencyKits.AddRange(result);                \r\n            }\r\n\r\n            return new OkObjectResult(emergencyKits);\r\n        }\r\n\r\n        [FunctionName(\"emergencykits-add\")]\r\n        public async Task<IActionResult> Add(\r\n            [HttpTrigger(AuthorizationLevel.Anonymous, \"post\", Route = null)]\r\n            HttpRequest req,\r\n            [CosmosDB( databaseName: \"2wr\", collectionName: \"emergencykits\", ConnectionStringSetting = \"CosmosDBConnection\")]\r\n            DocumentClient client,\r\n            ILogger log)\r\n        {\r\n          \r\n            log.LogInformation($\"Getting list of emergency kits\");      \r\n            var authorizationResult = await _apiAuthentication.AuthenticateAsync(req.Headers);\r\n            if (authorizationResult.Failed)\r\n            {\r\n                log.LogWarning(authorizationResult.FailureReason);\r\n                return new UnauthorizedResult();\r\n            }\r\n\r\n            var content = await new StreamReader(req.Body).ReadToEndAsync();\r\n            var newEmergencyKit = JsonConvert.DeserializeObject<EmergencyKit>(content);\r\n            newEmergencyKit.Id = Guid.NewGuid().ToString();\r\n            newEmergencyKit.UserId = authorizationResult.User.Identity.Name;\r\n\r\n            Uri collectionUri = UriFactory.CreateDocumentCollectionUri(\"2wr\", \"emergencykits\");\r\n            Document document = await client.CreateDocumentAsync(collectionUri, newEmergencyKit);\r\n      \r\n           \r\n            return new OkObjectResult(newEmergencyKit);\r\n        }\r\n    }\r\n}\r\n"
    },
    {
      "file": "TwoWeeksReady/EmergencyKits/EmergencyKitsApi.cs",
      "line": 61,
      "description": "## Create Emergency Kit\r\n\r\nCreates an emergency kit in Cosmos DB.",
      "contents": "using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Http;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.Azure.Documents;\r\nusing Microsoft.Azure.Documents.Client;\r\nusing Microsoft.Azure.Documents.Linq;\r\nusing Microsoft.Azure.WebJobs;\r\nusing Microsoft.Azure.WebJobs.Extensions.Http;\r\nusing Microsoft.Azure.WebJobs.Host;\r\nusing Microsoft.Extensions.Logging;\r\nusing Newtonsoft.Json;\r\nusing AzureFunctions.OidcAuthentication;\r\n\r\nnamespace TwoWeeksReady.EmergencyKits\r\n{\r\n    public class EmergencyKitsApi\r\n    {\r\n        private readonly IApiAuthentication _apiAuthentication;\r\n\r\n        public EmergencyKitsApi(IApiAuthentication apiAuthentication)\r\n        {\r\n            _apiAuthentication = apiAuthentication;\r\n        }\r\n\r\n        [FunctionName(\"emergencykits\")]\r\n        public async Task<IActionResult> GetList(\r\n            [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", Route = null)]\r\n            HttpRequest req,\r\n            [CosmosDB( databaseName: \"2wr\", collectionName: \"emergencykits\", ConnectionStringSetting = \"CosmosDBConnection\")]\r\n            DocumentClient client,\r\n            ILogger log)\r\n        {\r\n          \r\n            log.LogInformation($\"Getting list of emergency kits\");      \r\n            var authorizationResult = await _apiAuthentication.AuthenticateAsync(req.Headers);\r\n            if (authorizationResult.Failed)\r\n            {\r\n                log.LogWarning(authorizationResult.FailureReason);\r\n                return new UnauthorizedResult();\r\n            }      \r\n            Uri collectionUri = UriFactory.CreateDocumentCollectionUri(\"2wr\", \"emergencykits\");\r\n            var query = client.CreateDocumentQuery<EmergencyKit>(collectionUri, new FeedOptions{EnableCrossPartitionQuery = true}) // REVIEW: Why is this required when my where clause includes the partition id?\r\n                                .Where(e => e.UserId == authorizationResult.User.Identity.Name)\r\n                                .AsDocumentQuery();\r\n\r\n            var emergencyKits = new List<EmergencyKit>();\r\n            while (query.HasMoreResults)\r\n            {\r\n                var result = await query.ExecuteNextAsync<EmergencyKit>();\r\n                emergencyKits.AddRange(result);                \r\n            }\r\n\r\n            return new OkObjectResult(emergencyKits);\r\n        }\r\n\r\n        [FunctionName(\"emergencykits-add\")]\r\n        public async Task<IActionResult> Add(\r\n            [HttpTrigger(AuthorizationLevel.Anonymous, \"post\", Route = null)]\r\n            HttpRequest req,\r\n            [CosmosDB( databaseName: \"2wr\", collectionName: \"emergencykits\", ConnectionStringSetting = \"CosmosDBConnection\")]\r\n            DocumentClient client,\r\n            ILogger log)\r\n        {\r\n          \r\n            log.LogInformation($\"Getting list of emergency kits\");      \r\n            var authorizationResult = await _apiAuthentication.AuthenticateAsync(req.Headers);\r\n            if (authorizationResult.Failed)\r\n            {\r\n                log.LogWarning(authorizationResult.FailureReason);\r\n                return new UnauthorizedResult();\r\n            }\r\n\r\n            var content = await new StreamReader(req.Body).ReadToEndAsync();\r\n            var newEmergencyKit = JsonConvert.DeserializeObject<EmergencyKit>(content);\r\n            newEmergencyKit.Id = Guid.NewGuid().ToString();\r\n            newEmergencyKit.UserId = authorizationResult.User.Identity.Name;\r\n\r\n            Uri collectionUri = UriFactory.CreateDocumentCollectionUri(\"2wr\", \"emergencykits\");\r\n            Document document = await client.CreateDocumentAsync(collectionUri, newEmergencyKit);\r\n      \r\n           \r\n            return new OkObjectResult(newEmergencyKit);\r\n        }\r\n    }\r\n}\r\n"
    }
  ]
}